package com.WGUroster;
//package Student;
import java.util.ArrayList;


/** This program maintains a current roster of students within a course. */
/* Author: Jayson E. Bush */
/* Western Governors' University C169 Performance Assessment */
/* Date: 2017.11.13 */
/* Version 1.0 */
/* IDE: IntelliJ IDEA Community Ed. */

/*
    SECTION B.3: CREATE A STUDENT ROSTER WITH THE FOLLOWING METHODS THAT CONTAIN ALL ArrayList METHOD CALLS:
*/

public class Roster
{

    static String[] students =
            {
               "1,John,Smith,John1989@gmail.com,20,88,79,59",
               "2,Suzan,Erickson,Erickson_1990@gmail.com,19,91,72,85",
               "3,Jack,Napoli,The_lawyer99yahoo.com,19,85,84,87",
               "4,Erin,Black,Erin.black@comcast.net,22,91,98,82",
               "5,Jayson,Bush,naasirbush@icloud.com,38,91,92,93"
            };
    static ArrayList<Student> studentList = new ArrayList<>();


    public static void main(String[] args)
    {

        /*
            SECTION B: CREATE A PROGRAM THAT CONVERTS THE ARRAY OF STRINGS ABOVE TO AN ArrayList OF STUDENT
            OBJECTS.
        */

        for (String s : students)
        {
            String[] studentInfo = s.split(";");
            int student_ID = studentInfo[0];
            String studentFirstName = studentInfo[1];
            String studentLastName = studentInfo[2];
            String studentEmail_address = studentInfo[3];
            int studentAge = Integer.parseInt(studentInfo[4]);
            int studentGrade1 = Integer.parseInt(studentInfo[5]);
            int studentGrade2 = Integer.parseInt(studentInfo[6]);
            int studentGrade3 = Integer.parseInt(studentInfo[7]);

            add(studentID, studentFirstName, studentLastName, studentEmail_address, studentAge, studentGrade1, studentGrade2,
                    studentGrade3);
        }


        /*
            C.  Demonstrate the program’s required functionality by running the following scenario:
            print_all();
            print_invalid_emails();
            loop through the ArrayList and for each element:
            print_average_grade(current_loop_student);
            remove("3");
            remove("3");
            expected: this should print a message saying such a student with this ID was not found.
         */

        print_all();
        print_invalid_emails();

        for(Student student : studentList)
            print_average_grade(student);
        remove("3");
        remove("3");

    }
        /*
            a.  public static void add(String studentID, String firstname, String lastname, String emailaddress,
            int age, int grade1, int grade2, int grade3) that sets the instance variables from part B1 and updates
            the roster.
        */

    public static void add(int student_ID, String firstName, String lastLame, String email_address,
                           int age, int grade1, int grade2, int grade3)
    {
        int[] grades = {grade1, grade2, grade3};
        Student student = new Student(student_ID, firstName, lastName, email_address, age, student_grades);
        studentList.add(student);
    }

    /*
        SECTION B.3-A: CREATE A public static void remove(String studentID) THAT REMOVES STUDENTS FROM THE ROSTER BY
        STUDENT ID. Note: If the student ID doesn’t exist, the method should print an error message indicating that it
        is not found.
    */

    public static void remove(String studentID)
    {
        for (int i = 0; i < studentList.size(); i++)
        {
            String checkID = studentList.get(i).getStudentID();
            if (checkID.equals(studentID))
            {
                studentList.remove(i);
                System.out.printf("Student ID: %s is not found.\n", studentID);
                return;
            }
        }
    }

    public static void print_all()
    {
        for (Student s : studentList)
        {
            s.print();
        }
    }

    /*
        SECTION B.3-C: CREATE public static void print_average_grade(String studentID) THAT CORRECTLY PRINTS A
        STUDENT'S AVERAGE GRADE BY STUDENT ID.
     */

    public static void print_average_grade(Student s)
    {
        int average = (s.getGrades()[0]+ s.getGrades()[1] + s.getGrades()[2])/3;
        System.out.println("Student Id: " + s.getStudentID() + "\t Average Grade:\t" + average);

    }

    /*
        SECTION B.3-D: CREATE A public static void print_invalid_emails() THAT VERIFIES STUDENT E-MAIL ADDRESSES AND
        DISPLAYS ALL INVALID E-MAIL ADDRESSES TO THE USER. Note: A valid e-mail should include an at sign (“@”)
        and period (“.”) and doesn’t include a space.
     */

    public static void print_invalid_emails()
    {
        System.out.println("Invalid Email Address: ");
        for (Student student : studentList)
        {
            if (!(student.getEmailAddress().contains("@") && student.getEmailAddress().contains(".")
                    && !(student.getEmailAddress().contains(" "))))
            {
                System.out.println(student.getEmailAddress());
            }
        }
    }
}
